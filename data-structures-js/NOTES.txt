data structures are the things in your code that allow you to store, retreive, delete... and in general, to manage data.

in js, we have 4 main built-in data structures: arrays, objects, maps, sets.

for the situations when you don't care just about the values, and whether they are ordered or not, but you want to map them to an identifier: you want key value pairs of ordered or unordered data. in this situations, you use maps (ordered data) or objects (unordered data).

in the case of arrays, 'ordered lists of data' doesn't mean that the data is sorted (eg. numbers in the arrays are sorted), but that the insertion order is memorized (ie. each element has specific index, and that location in the array is kept)

however, this course will be mainly about custom data structures (data structures that you can build on your own, based on the built-in data structures of js, ie. arrays, objects, sets, maps)

ARRAYS:
size (length) adjusts dynamically (automatically). in other programming language, you have to define the length of the array to be able to use it. this makes our lives as developers easier, but also it's important for memory management and performance optimizations (js automatically takes care that the array doesn't occupy too much memory). Deletion and finding of elements can require extra work: this means that it can be a bit more performance intensive

the built-in 'find' method is useful in certain situations, eg, when you have an array full of objects, and you want to find a specific object by one value of one property of the object.
what's the problem with methods such as 'findIndex' and 'find'? we have to go through all the elements of the array and apply the callback function to all of them, until the condition that we specify is true. therefore, these kind of methods can be performance intensive. the same applies for deleting elements (eg. 'splice' method): this can be performance intensive because js has to move all the elements after the element that was removed (change their indexes).

SETS:
sets are also about lists of data, but they work a bit differently than arrays. to create a set, we have to use the 'Set' constructor function with the 'new' keyword, ie. we don't have a shortcut, eg. [], for arrays.
as you can see in the slide, duplicate items are not allowed ('pizza' won't be added a second time).
even though sets are iterable (ie. you can use a 'for of' loop), the order could be different for different loops, ie. the order is not guaranteed.
deletion and finding elements is easier and faster than with arrays (the reason being that the order does not matter; since the position of the value does not matter, sets can store data more efficiently: it doesn't need to go through all the values (as it happens with arrays when trying to find a value), or to move all subsequent values (as it happens with arrays when deleting a value): it has other techniques for quickly finding or deleting a value). see 'sets.js'.